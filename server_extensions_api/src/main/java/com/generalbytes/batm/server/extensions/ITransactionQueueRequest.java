/*************************************************************************************
 * Copyright (C) 2014-2019 GENERAL BYTES s.r.o. All rights reserved.
 *
 * This software may be distributed and modified under the terms of the GNU
 * General Public License version 2 (GPL2) as published by the Free Software
 * Foundation and appearing in the file GPL2.TXT included in the packaging of
 * this file. Please note that GPL2 Section 2[b] requires that all works based
 * on this software must also be made publicly available under the terms of
 * the GPL2 ("Copyleft").
 *
 * Contact information
 * -------------------
 *
 * GENERAL BYTES s.r.o.
 * Web      :  http://www.generalbytes.com
 *
 ************************************************************************************/
package com.generalbytes.batm.server.extensions;

import java.math.BigDecimal;

/**
 * Information about a BUY transaction that is going to be queued
 */
public interface ITransactionQueueRequest {

    /**
     * Returns serial number of the terminal where the transaction was created
     * @return
     */
    String getTerminalSerialNumber();

    /**
     * Returns unique (in server scope) transaction id. It is generated by server.
     * @return
     */
    String getRemoteTransactionId();

    /**
     * Returns transaction id generated locally by terminal to perform request on server.
     * Don't use it if you don't have to. It is used only for time before server assigns remote transaction id to a transaction.
     * @return
     */
    String getLocalTransactionId();


    /**
     * Fiat amount
     * @return
     */
    BigDecimal getCashAmount();

    /**
     * Fiat currency code (USD, EUR etc)
     * @return
     */
    String getCashCurrency();

    /**
     * Amount of coins - crypto-currency
     * @return
     */
    BigDecimal getCryptoAmount();

    /**
     * Crypto currency code (BTC, ETH etc)
     * @return
     */
    String getCryptoCurrency();

    /**
     * Destination address where the coins are going to be sent
     * @return
     */
    String getCryptoAddress();

    /**
     * Server internal identity id of person performing the transaction
     * @return
     */
    String getIdentityPublicId();

}
