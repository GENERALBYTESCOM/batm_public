buildscript {
    ext.with {
        hasGbArtifactory = (project.hasProperty('gbArtifactoryUrl')
            && project.hasProperty('gbArtifactoryUser')
            && project.hasProperty('gbArtifactoryPassword'))

        setRepositoriesFor = { RepositoryHandler repositoryHandler ->
            if (hasGbArtifactory) {
                repositoryHandler.maven {
                    credentials {
                        username gbArtifactoryUser
                        password gbArtifactoryPassword
                    }
                    url gbArtifactoryUrl
                }
            }
            repositoryHandler.mavenCentral()
            repositoryHandler.maven { url 'https://jitpack.io' }
        }
        batmDependencySubstitutionConfig = file('dependencySubstitutions.txt')
    }
    setRepositoriesFor(repositories)
}

allprojects {
    setRepositoriesFor(buildscript.repositories)
    setRepositoriesFor(repositories)
    repositories {
        //bitcoin-json-rpc-client-1.0.jar isn't part of any well known maven repo
        //so we search the libs dir; gradle generates (guesses) metadata except dependencies.
        //Artifacts from repos with real metadata take precedence.
        flatDir {
            dirs rootProject.file('libs')
        }
    }
    tasks.withType(JavaCompile) {
        project.sourceCompatibility = JavaVersion.VERSION_1_8
        options.encoding = 'UTF-8'
        options.incremental = true
    }
    // Jars with the same contents should have the same checksums
    tasks.withType(AbstractArchiveTask).configureEach {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
    afterEvaluate {
        if (pluginManager.hasPlugin('com.generalbytes.gradle.dependency.verification')) {
            dependencyChecksums {
                global = true
            }
            dependencyVerifications {
                setConfigurations([]) // effectively turns off all checksum verifications
            }
        }
        if (pluginManager.hasPlugin('com.generalbytes.gradle.dependency.strict')) {
            strictDependencies {
//                conflictFail false // turns off failure on version conflict
            }
        }
    }

    wrapper {
        distributionType = Wrapper.DistributionType.ALL
    }
}