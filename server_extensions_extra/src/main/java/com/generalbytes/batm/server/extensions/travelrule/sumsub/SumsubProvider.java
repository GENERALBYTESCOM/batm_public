package com.generalbytes.batm.server.extensions.travelrule.sumsub;

import com.generalbytes.batm.server.extensions.travelrule.IIdentityWalletEvaluationRequest;
import com.generalbytes.batm.server.extensions.travelrule.ITravelRuleProvider;
import com.generalbytes.batm.server.extensions.travelrule.ITravelRuleProviderCredentials;
import com.generalbytes.batm.server.extensions.travelrule.ITravelRuleTransferData;
import com.generalbytes.batm.server.extensions.travelrule.ITravelRuleTransferInfo;
import com.generalbytes.batm.server.extensions.travelrule.ITravelRuleTransferListener;
import com.generalbytes.batm.server.extensions.travelrule.ITravelRuleTransferResolvedEvent;
import com.generalbytes.batm.server.extensions.travelrule.ITravelRuleTransferUpdateRequest;
import com.generalbytes.batm.server.extensions.travelrule.ITravelRuleVasp;
import com.generalbytes.batm.server.extensions.travelrule.ITravelRuleWalletInfo;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.transactioninfo.SumsubTransactionInformationResponse;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.updatetransactionhash.SumsubUpdateTransactionHashResponse;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.mapper.SumsubTravelRuleApiMapper;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.webhooks.SumsubTransferHandler;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.Objects;

/**
 * Sumsub Travel Rule provider.
 *
 * @see <a href="https://sumsub.com/travel-rule/">Sumsub official website</a>
 */
@Slf4j
@AllArgsConstructor
public class SumsubProvider implements ITravelRuleProvider {

    public static final String NAME = "Sumsub Travel Rule Provider";

    @Getter
    private ITravelRuleProviderCredentials credentials;
    private final SumsubService sumsubService;
    private final SumsubApiService apiService;

    @Override
    public String getName() {
        return NAME;
    }

    @Override
    public ITravelRuleWalletInfo getWalletInfo(IIdentityWalletEvaluationRequest walletEvaluationRequest) {
        return null; // Sumsub does not support wallet verification before creating a transfer
    }

    @Override
    public List<ITravelRuleVasp> getAllVasps() {
        return sumsubService.getAllVasps(credentials).getItems().stream()
                .map(SumsubTravelRuleApiMapper::toITravelRuleVasp)
                .toList();
    }

    @Override
    public ITravelRuleTransferInfo createTransfer(ITravelRuleTransferData outgoingTransferData) {
        SumsubTransactionInformationResponse response
                = sumsubService.submitTransactionWithoutApplicant(credentials, outgoingTransferData);

        return SumsubTravelRuleApiMapper.toITravelRuleTransferInfo(response);
    }

    @Override
    public boolean registerTransferListener(ITravelRuleTransferListener transferListener) {
        return SumsubTransferHandler.getInstance().registerTransferListener(transferListener);
    }

    @Override
    public boolean unregisterTransferListener() {
        log.debug("Transfer listener for Sumsub cannot be unregistered.");
        return true;
    }

    @Override
    public ITravelRuleTransferInfo updateTransfer(ITravelRuleTransferUpdateRequest updateRequest) {
        SumsubUpdateTransactionHashResponse response = sumsubService.updateTransactionHash(credentials, updateRequest);
        return SumsubTravelRuleApiMapper.toITravelRuleTransferInfo(response);
    }

    @Override
    public void notifyProviderConfigurationChanged() {
        // Handled by the SumsubProviderFactory and SumsubProvider#updateCredentials
    }

    @Override
    public boolean testProviderConfiguration() {
        log.info("A configuration test was requested for {}, client ID (token): {}", NAME, credentials.getClientId());

        return sumsubService.testProviderCredentials(credentials);
    }

    @Override
    public boolean onTransferResolved(ITravelRuleTransferResolvedEvent event) {
        return sumsubService.handleTransferResolved(credentials, event);
    }

    /**
     * Get transaction information.
     *
     * @param txnId Transaction ID generated by the Sumsub server.
     * @return An object containing information about transaction.
     */
    public SumsubTransactionInformationResponse getTransactionInformation(String txnId) {
        return sumsubService.getTransactionInformation(credentials, txnId);
    }

    /**
     * Updates the current credentials if they differ from the provided ones.
     *
     * <p>If the new credentials are identical to the current credentials, no action is taken.
     * Otherwise, the method cleans the existing API proxy configuration related with client ID, and then sets the new credentials.</p>
     *
     * @param credentials The new credentials.
     */
    void updateCredentials(ITravelRuleProviderCredentials credentials) {
        if (credentialsMatch(this.credentials, credentials)) {
            return;
        }

        log.debug("Sumsub credentials changed for VASP '{}'.", this.credentials.getVaspDid());

        // Clean the current API proxy configuration using the old credentials
        apiService.cleanApiConfig(this.credentials);

        // Start using the new credentials
        this.credentials = credentials;
    }

    private boolean credentialsMatch(ITravelRuleProviderCredentials currentCredentials, ITravelRuleProviderCredentials newCredentials) {
        return Objects.equals(currentCredentials.getClientId(), newCredentials.getClientId())
                && Objects.equals(currentCredentials.getClientSecret(), newCredentials.getClientSecret())
                && Objects.equals(currentCredentials.getPrivateKey(), newCredentials.getPrivateKey());
    }

}
