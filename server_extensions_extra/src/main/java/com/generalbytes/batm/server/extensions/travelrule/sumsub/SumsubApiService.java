package com.generalbytes.batm.server.extensions.travelrule.sumsub;

import com.generalbytes.batm.server.extensions.travelrule.ITravelRuleProviderCredentials;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.SumsubTravelRuleApi;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.SumsubVaspListResponse;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.submittransaction.SumsubSubmitTxWithoutApplicantRequest;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.transactioninfo.SumsubTransactionInformationResponse;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.transactionownershipresolution.SumsubTransactionOwnershipResolutionResponse;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.updatetransactionhash.SumsubUpdateTransactionHashRequest;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.updatetransactionhash.SumsubUpdateTransactionHashResponse;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.walletownershipconfirmation.SumsubConfirmWalletOwnershipRequest;
import com.generalbytes.batm.server.extensions.common.sumsub.api.SumsubApiFactory;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Service for processing API calls on Sumsub.
 */
@Slf4j
@AllArgsConstructor
public class SumsubApiService {

    private static final int VASP_LIMIT = Integer.MAX_VALUE;
    private final SumsubApiFactory apiFactory;

    /**
     * Map of created APIs with necessary credentials for individual client ID. Key = client ID (token).
     */
    private final Map<String, SumsubTravelRuleApi> apis = new ConcurrentHashMap<>();

    /**
     * Get list of all VASPs.
     *
     * @param credentials {@link ITravelRuleProviderCredentials}
     * @return An object containing list of VASPs.
     *
     * @see SumsubTravelRuleApi#listVasps
     */
    public SumsubVaspListResponse getAllVasps(ITravelRuleProviderCredentials credentials) {
        return getApi(credentials).listVasps(VASP_LIMIT);
    }

    /**
     * Submit transaction for non-existing applicant.
     *
     * @param credentials {@link ITravelRuleProviderCredentials}
     * @param request     {@link SumsubSubmitTxWithoutApplicantRequest}
     * @return An object containing response data including the Transaction ID generated by the Sumsub server.
     */
    public SumsubTransactionInformationResponse submitTransactionWithoutApplicant(ITravelRuleProviderCredentials credentials,
                                                                                  SumsubSubmitTxWithoutApplicantRequest request
    ) {
        return getApi(credentials).submitTransactionWithoutApplicant(request);
    }

    /**
     * Update blockchain transaction hash.
     *
     * @param credentials {@link ITravelRuleProviderCredentials}
     * @param txnId       Transaction ID generated by the Sumsub server.
     * @param request     {@link SumsubUpdateTransactionHashRequest}
     * @return An object containing response data about updating the blockchain transaction hash.
     */
    public SumsubUpdateTransactionHashResponse updateTransactionHash(ITravelRuleProviderCredentials credentials,
                                                                     String txnId,
                                                                     SumsubUpdateTransactionHashRequest request
    ) {
        return getApi(credentials).updateTransactionHash(txnId, request);
    }

    /**
     * Get transaction information.
     *
     * @param credentials {@link ITravelRuleProviderCredentials}
     * @param txnId       Transaction ID generated by the Sumsub server.
     * @return An object containing information about transaction.
     */
    public SumsubTransactionInformationResponse getTransactionInformation(ITravelRuleProviderCredentials credentials, String txnId) {
        return getApi(credentials).getTransactionInformation(txnId);
    }

    /**
     * Confirms ownership of the wallet for a given transaction.
     *
     * @param credentials {@link ITravelRuleProviderCredentials}
     * @param txnId       Transaction ID generated by the Sumsub server.
     * @return An object containing information about confirmed transaction.
     */
    public SumsubTransactionOwnershipResolutionResponse confirmTransactionOwnership(ITravelRuleProviderCredentials credentials,
                                                                                    String txnId
    ) {
        return getApi(credentials).confirmTransactionOwnership(txnId);
    }

    /**
     * Rejects ownership of the wallet for a given transaction.
     *
     * @param credentials {@link ITravelRuleProviderCredentials}
     * @param txnId       Transaction ID generated by the Sumsub server.
     * @return An object containing information about rejected transaction.
     */
    public SumsubTransactionOwnershipResolutionResponse rejectTransactionOwnership(ITravelRuleProviderCredentials credentials,
                                                                                   String txnId
    ) {
        return getApi(credentials).rejectTransactionOwnership(txnId);
    }

    /**
     * Confirms ownership of the wallet.
     *
     * @param credentials {@link ITravelRuleProviderCredentials}
     * @param txnId       Transaction ID generated by the Sumsub server.
     * @param request     {@link SumsubConfirmWalletOwnershipRequest}
     * @return An object containing information about transaction.
     */
    public SumsubTransactionInformationResponse confirmWalletOwnership(ITravelRuleProviderCredentials credentials,
                                                                       String txnId,
                                                                       SumsubConfirmWalletOwnershipRequest request
    ) {
        return getApi(credentials).confirmWalletOwnership(txnId, request);
    }

    /**
     * Cleans the API proxy configuration using the client ID from the credentials. Use this after the credentials have changed.
     *
     * @param credentials {@link ITravelRuleProviderCredentials}
     */
    public void cleanApiConfig(ITravelRuleProviderCredentials credentials) {
        SumsubTravelRuleApi api = apis.remove(credentials.getClientId());
        if (api == null) {
            log.trace("Sumsub API for client ID '{}' not exists.", credentials.getClientId());
        }
    }

    private SumsubTravelRuleApi getApi(ITravelRuleProviderCredentials credentials) {
        return apis.computeIfAbsent(
                credentials.getClientId(),
                clientId -> apiFactory.createSumsubTravelRuleApi(clientId, credentials.getClientSecret())
        );
    }

}
