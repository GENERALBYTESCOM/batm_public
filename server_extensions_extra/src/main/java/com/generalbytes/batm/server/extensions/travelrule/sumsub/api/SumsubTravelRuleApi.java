package com.generalbytes.batm.server.extensions.travelrule.sumsub.api;

import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.SumsubVaspListResponse;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.submittransaction.SumsubSubmitTxWithoutApplicantRequest;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.transactioninfo.SumsubTransactionInformationResponse;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.transactionownershipresolution.SumsubTransactionOwnershipResolutionResponse;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.updatetransactionhash.SumsubUpdateTransactionHashRequest;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.updatetransactionhash.SumsubUpdateTransactionHashResponse;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.api.dto.walletownershipconfirmation.SumsubConfirmWalletOwnershipRequest;
import com.generalbytes.batm.server.extensions.travelrule.sumsub.common.api.SumsubApiException;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.PATCH;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;
import jakarta.ws.rs.core.MediaType;

/**
 * Provides access to relevant Sumsub Travel Rule endpoints.
 *
 * @see <a href="https://docs.sumsub.com/reference/about-sumsub-api">Sumsub documentation</a>
 */
@Path("/resources")
@Produces(MediaType.APPLICATION_JSON)
public interface SumsubTravelRuleApi {

    /**
     * Get list of all VASPs.
     *
     * @param limit Limit of fetched VASPs.
     * @return Response object containing basic data about all VASPs.
     * @throws SumsubApiException If the call fails.
     *
     * @see <a href="https://docs.sumsub.com/reference/get-available-vasps">Sumsub documentation</a>
     */
    @GET
    @Path("/vasps/-")
    SumsubVaspListResponse listVasps(@QueryParam("limit") int limit) throws SumsubApiException;

    /**
     * Submit transaction for non-existing applicant.
     *
     * @param request {@link SumsubSubmitTxWithoutApplicantRequest}
     * @return An object containing response data including the Transaction ID generated by the Sumsub server.
     * @throws SumsubApiException If the call fails.
     *
     * @see <a href="https://docs.sumsub.com/reference/submit-transaction-for-non-existing-applicant">Sumsub documentation</a>
     */
    @POST
    @Path("/applicants/-/kyt/txns/-/data")
    @Consumes(MediaType.APPLICATION_JSON)
    SumsubTransactionInformationResponse submitTransactionWithoutApplicant(SumsubSubmitTxWithoutApplicantRequest request)
            throws SumsubApiException;

    /**
     * Update blockchain transaction hash.
     *
     * @param txnId   Transaction ID generated by the Sumsub server.
     * @param request {@link SumsubUpdateTransactionHashRequest}
     * @return An object containing response data about updating the blockchain transaction hash.
     * @throws SumsubApiException If the call fails.
     *
     * @see <a href="https://docs.sumsub.com/reference/patch-transaction-with-chain-txid">Sumsub documentation</a>
     */
    @PATCH
    @Path("/kyt/txns/{txnId}/data/info")
    @Consumes(MediaType.APPLICATION_JSON)
    SumsubUpdateTransactionHashResponse updateTransactionHash(@PathParam("txnId") String txnId, SumsubUpdateTransactionHashRequest request)
            throws SumsubApiException;

    /**
     * Get transaction information.
     *
     * @param txnId Transaction ID generated by the Sumsub server.
     * @return An object containing information about transaction.
     * @throws SumsubApiException If the call fails.
     *
     * @see <a href="https://docs.sumsub.com/reference/get-transaction">Sumsub documentation</a>
     */
    @GET
    @Path("/kyt/txns/{txnId}/one")
    SumsubTransactionInformationResponse getTransactionInformation(@PathParam("txnId") String txnId) throws SumsubApiException;

    /**
     * Confirms ownership of the wallet for a given transaction.
     *
     * @param txnId Transaction ID generated by the Sumsub server.
     * @return An object containing information about confirmed transaction.
     * @throws SumsubApiException If the call fails.
     *
     * @see <a href="https://docs.sumsub.com/reference/confirm-or-reject-transaction-ownership">Sumsub documentation</a>
     */
    @POST
    @Path("/kyt/txns/{txnId}/ownership/confirmed")
    SumsubTransactionOwnershipResolutionResponse confirmTransactionOwnership(@PathParam("txnId") String txnId) throws SumsubApiException;

    /**
     * Rejects ownership of the wallet for a given transaction.
     *
     * @param txnId Transaction ID generated by the Sumsub server.
     * @return An object containing information about rejected transaction.
     * @throws SumsubApiException If the call fails.
     *
     * @see <a href="https://docs.sumsub.com/reference/confirm-or-reject-transaction-ownership">Sumsub documentation</a>
     */
    @POST
    @Path("/kyt/txns/{txnId}/ownership/unconfirmed")
    SumsubTransactionOwnershipResolutionResponse rejectTransactionOwnership(@PathParam("txnId") String txnId) throws SumsubApiException;

    /**
     * Confirms ownership of the wallet.
     *
     * @param txnId   Transaction ID generated by the Sumsub server.
     * @param request {@link SumsubConfirmWalletOwnershipRequest}
     * @return An object containing information about transaction.
     * @throws SumsubApiException If the call fails.
     *
     * @see <a href="https://docs.sumsub.com/reference/confirm-wallet-ownership">Sumsub documentation</a>
     */
    @POST
    @Path("/kyt/txns/{txnId}/travelRuleOwnership")
    @Consumes(MediaType.APPLICATION_JSON)
    SumsubTransactionInformationResponse confirmWalletOwnership(@PathParam("txnId") String txnId,
                                                                SumsubConfirmWalletOwnershipRequest request) throws SumsubApiException;

}
